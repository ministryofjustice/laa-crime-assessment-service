plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.6'
    id 'com.adarshr.test-logger' version '4.0.0'
    id "com.github.ben-manes.versions" version "0.52.0"
    id 'jacoco'
}

group = "uk.gov.justice.laa.crime"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springModulithVersion', "1.3.5")
}

dependencies {
    // Alignment for all Spring Boot and Spring Modulith dependencies
    implementation platform("org.springframework.boot:spring-boot-dependencies:3.4.5")
    implementation platform("org.springframework.modulith:spring-modulith-bom:1.3.5")
    
    // Spring Modulith
    implementation 'org.springframework.modulith:spring-modulith-starter-core'
    implementation 'org.springframework.modulith:spring-modulith-docs'
    implementation 'org.springframework.modulith:spring-modulith-actuator'
    
    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-configuration-processor'
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-validation"

    // Database
    implementation 'org.postgresql:postgresql'
    implementation 'org.liquibase:liquibase-core'
    
    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.modulith:spring-modulith-starter-test'
    testImplementation 'com.h2database:h2:2.4.240'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    
    // Documentation
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6"
    
    compileOnly 'org.projectlombok:lombok:1.18.38'
    
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test
    doLast {
        def reportPath = reports.html.outputLocation.get().asFile.absolutePath
        println("JaCoCo report available at: file://$reportPath/index.html")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            // placeholder exclude for ease of modification.
            excludes = ['uk.gov.justice.laa.crime.assessmentservice.AssessmentServiceApplication', 'uk.gov.justice.laa.crime.assessmentservice.iojappeal.IojAppealController','uk.gov.justice.laa.crime.assessmentservice.passport.PassportController']
            limit {
                minimum = 0.8
            }
        }
    }
}

